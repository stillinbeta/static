var searchIndex = JSON.parse('{\
"cold_iron":{"doc":"A Brief Introduction to Nanothaumaturgy","t":[13,13,13,13,13,4,13,11,11,0,0,11,11,11,14,0,0,14,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11],"n":["AddressConflictError","ConnectionError","InsufficentEnergy","LicenseError","ReadError","ThaumError","WriteError","borrow","borrow_mut","crypt","detect","fmt","from","into","mnemonic","net","sita","thaumtest","try_from","try_into","type_id","Envelope","Message","ThaumCrypto","author","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","create","decrypt","decrypt_with_author","encrypt","encrypt_with_author","from","from","from","from_wire","from_wire","into","into","into","message","to_wire","to_wire","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","verify","verify_with_author","Creature","Existential","MalevolentEntity","Other","Person","Ward","borrow","borrow","borrow_mut","borrow_mut","event_stream","fmt","from","from","into","into","new","try_from","try_from","try_into","try_into","type_id","type_id","watch_home","watch_network","watch_place","RunicAddress","ThaumListener","ThaumSocket","ThaumStream","accept","address","bind","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","local_addr","new","poll_next","remote_addr","summon","try_accept","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll_next","try_read","try_write","type_id","type_id","type_id","type_id","GenericSITA","Handle","Thaumatic","borrow","borrow","borrow_mut","borrow_mut","from","from","get_by_port","initialize","into","into","scan","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["cold_iron","","","","","","","","","","","","","","","","","","","","","cold_iron::crypt","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cold_iron::detect","","","","","","","","","","","","","","","","","","","","","","","","","","cold_iron::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","cold_iron::sita","","","","","","","","","","","","","","","","","","",""],"d":["Someone else is using that address","Failed to connect to thaumatic device","Insufficient thaumatic energy. Consider a small offering","You have not confirmed you are licensed to operate …","Read Error over thaumatic connection","Represents various error conditions that result from …","Write Error over thaumatic connection","","","Libraries for cryptothaumaturgy","Library for building Thaumatic Intrusion Detection Systems","","","","Compile-time reminders of intent","Libraries for long-distance thaumatic communication","Abstraction layer for Self-Actualising Thaumatic Arrays …","Stochastic testing for intent-influenced programming","","","","Envelope represents an cryptothaumaticly encrypted message","Message represents an unencrypted message of …","ThaumCrypto is a wrapper struct, representing a SITA or …","Returns the author of the message. If the message is …","","","","","","","Prepare a thaumatic device for cryptography","Attempt to decrypt an envelope. The author is not …","Attempt to decrypt an envelope. Standard disclaimers …","Attempt to encrypt a given message The destination is not …","Attempt to encrypt a given message for a certain author. …","","","","Try to convert a message from a standard wire format","Try to convert an envelope from a standard wire format","","","","Unwraps the inner message","Try to convert  a message to the standard wire format","Try to convert an envelope to the standard wire format","","","","","","","","","","Verify the authenticity of a signed, unencrypted message. …","Verify the authenticity of a signed, unencrypted message. …","A creature, be they earthly or otherwise.","A more abstract threat, perhaps from yourself or poor …","","Anything not described by the above. May be cryptic.","A person, whether physical or digital. The associated …","Ward represents a watcher for some entity. It must be …","","","","","By default, a broken warding will trigger a sense of …","","","","","","Initialise a thaumatic device as a ward","","","","","","","Direct this ward to watch your “home,” whatever that …","Direct this ward to watch a given network block. The …","Direct this ward to watch a place. Address need not be a …","","","","","Accept an incoming thaumatic connection","Return the address this socket is bound to","Attempt to bind a thaumatic socket to a runic address. …","","","","","","","","","Attempt to create a thaumatic socket. No connections will …","","","","","","","","","","","","","The local address we are bound to","Initialise a runic address from a discrete set of unicode …","","The remove address we resolved","Attempt to summon a remote circle. This can fail for any …","Accept an incoming connection if one exists, otherwise …","","","","","","","","","","","Attempt to read a byte sequence into a buffer from this …","Attempt to write a byte sequence to this stream","","","","","Generic SITA is a plug-and-play compatible SITA. Other …","","Thaumatic is an internal trait that represents the …","","","","","","","Retrieve a specific handle from a numbered port","Initialize a generic SITA device from a handle. For …","","","Scan this computer for thaumatic devices","","","","","",""],"i":[1,1,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,1,1,1,0,0,0,2,3,2,4,3,2,4,3,3,3,3,3,3,2,4,2,4,3,2,4,2,2,4,3,2,4,3,2,4,3,2,4,3,3,5,5,0,5,5,0,6,5,6,5,6,5,6,5,6,5,6,6,5,6,5,6,5,6,6,6,0,0,0,0,7,7,8,7,8,9,10,7,8,9,10,8,7,8,9,10,7,8,9,10,7,8,9,10,9,10,7,9,9,7,7,8,9,10,10,7,8,9,10,7,9,9,7,8,9,10,0,0,0,11,12,11,12,11,12,0,12,11,12,0,11,12,11,12,11,12],"f":[null,null,null,null,null,null,null,[[]],[[]],null,null,[[["formatter",3]],["result",6]],[[]],[[]],null,null,null,null,[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,[[],[["string",3],["result",4],["thaumerror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["thaumcrypto",3],["result",4],["thaumerror",4]]],[[["envelope",3]],[["thaumerror",4],["message",3],["result",4]]],[[["envelope",3],["str",15]],[["thaumerror",4],["message",3],["result",4]]],[[["message",3]],[["thaumerror",4],["envelope",3],["result",4]]],[[["message",3],["str",15]],[["thaumerror",4],["envelope",3],["result",4]]],[[]],[[]],[[]],[[],[["result",4],["thaumerror",4]]],[[],[["result",4],["thaumerror",4]]],[[]],[[]],[[]],[[],[["result",4],["thaumerror",4]]],[[],[["result",4],["usize",15],["thaumerror",4]]],[[],[["result",4],["usize",15],["thaumerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["message",3]],[["result",4],["bool",15],["thaumerror",4]]],[[["message",3],["str",15]],[["result",4],["bool",15],["thaumerror",4]]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["thaumerror",4],["result",4],["ward",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],[["thaumerror",4],["result",4]]],[[["ipcidr",4]],[["thaumerror",4],["result",4]]],[[["str",15]],[["thaumerror",4],["result",4]]],null,null,null,null,[[],[["thaumstream",3],["result",4],["thaumerror",4]]],[[],["runicaddress",3]],[[["runicaddress",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["thaumerror",4],["thaumsocket",3],["result",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["result",4],["thaumerror",4],["runicaddress",3]]],[[],["runicaddress",3]],[[["pin",3],["context",3]],[["poll",4],["option",4]]],[[],[["result",4],["thaumerror",4],["runicaddress",3]]],[[["runicaddress",3]],[["result",4],["thaumerror",4]]],[[],[["thaumerror",4],["result",4],["option",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["string",3]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["context",3],["pin",3]],[["option",4],["poll",4]]],[[],[["result",4],["usize",15],["thaumerror",4]]],[[],[["result",4],["usize",15],["thaumerror",4]]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u8",15]],[["result",4],["handle",3],["thaumerror",4]]],[[["handle",3]],[["result",4],["thaumerror",4]]],[[]],[[]],[[],[["result",4],["thaumerror",4],["vec",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[4,"ThaumError"],[3,"Message"],[3,"ThaumCrypto"],[3,"Envelope"],[4,"MalevolentEntity"],[3,"Ward"],[3,"ThaumListener"],[3,"ThaumSocket"],[3,"ThaumStream"],[3,"RunicAddress"],[3,"Handle"],[3,"GenericSITA"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};